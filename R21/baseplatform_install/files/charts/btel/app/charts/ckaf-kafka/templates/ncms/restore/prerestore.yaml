{{ if gt (int .Values.global.prerestore) 0 }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ template "kafka.name" . }}-kf-prerestore-job"
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: {{ .Values.global.seccompAllowedProfileNames }}
    seccomp.security.alpha.kubernetes.io/defaultProfileName: {{ .Values.global.seccompDefaultProfileName }}
spec:
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      {{- if .Values.global.rbacEnable }}
      serviceAccountName: {{ template "kfserviceAccount.name" . }}
      {{- end }}
      {{- if eq .Values.security.enabled true }}
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.security.runAsUser }}
        fsGroup: {{ .Values.security.fsGroup }}
      {{- end }}
      restartPolicy: Never
      containers:
      - name: ckaf-kafka-kf-prerestore-pod
        image: "{{ .Values.global.registry3 }}/{{ .Values.kubectlImage }}:{{ .Values.kubectlTag }}"
        imagePullPolicy: IfNotPresent
        {{- if eq .Values.security.enabled true }}
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          capabilities:
            drop:
              - all
        {{- end }}
        resources:
{{ toYaml .Values.jobResources | indent 10 }}
        command:
        - sh
        - -c
        - |
          kubectl get  cm {{ .Release.Name }}-kf-cbur-conf --namespace {{ .Release.Namespace }} -o yaml | grep 'is_restore: "false"'
          if [ $? -eq 0 ]
          then 
              echo "Performing pre-restore actions on kafka"
              echo "Updating KF and ZK cbur config is_restore to true"
              kubectl get cm {{ .Release.Name }}-kf-cbur-conf --namespace {{ .Release.Namespace }} -o yaml | sed 's/restore: "false"/restore: "true"/g' | kubectl replace -f - 
              kubectl get cm {{ .Release.Name }}-zk-cbur-conf --namespace {{ .Release.Namespace }} -o yaml | sed 's/restore: "false"/restore: "true"/g' | kubectl replace -f - 
              echo deleting kafka pods
              kubectl delete pods --namespace {{ .Release.Namespace }} -l app={{ .Chart.Name }},release={{ .Release.Name }} --wait=true --timeout=5m
              echo deleting zookeeper pods
              kubectl delete pods --namespace {{ .Release.Namespace }} -l app=ckaf-zookeeper,release={{ .Release.Name }} --wait=true --timeout=5m
              sleep 10s
              echo waiting for kafka pods to comeup
              while true
              do
                  kf_pods=$(kubectl get sts --namespace {{ .Release.Namespace }} -l app={{ .Chart.Name }},release={{ .Release.Name }} --no-headers=true | awk '{ print$2 }')
                  if [ $(cut -d'/' -f2 <<< $kf_pods) == $(cut -d'/' -f1 <<< $kf_pods) ]
                  then
                      echo All kafka pods are up
                      break
                  else
                      echo  $(cut -d'/' -f1 <<< $kf_pods) of $(cut -d'/' -f2 <<< $kf_pods) pods are only up. Waiting for all kafka pods to come up
                  fi
                  sleep 10s
              done

              echo waiting for zk pods to comeup;
              while true
              do
                  zk_pods=$(kubectl get sts --namespace {{ .Release.Namespace }} -l app=ckaf-zookeeper,release={{ .Release.Name }} --no-headers=true | awk '{ print$2 }')
                  if [ $(cut -d'/' -f2 <<< $zk_pods) == $(cut -d'/' -f1 <<< $zk_pods) ]
                  then
                      echo All Zookeeper pods are up
                      break
                  else
                      echo  $(cut -d'/' -f1 <<< $zk_pods) of $(cut -d'/' -f2 <<< $zk_pods) pods are only up. Waiting for all ZK pods to come up
                  fi
                  sleep 10s
              done

              sleep 5s
          fi
          for pod_id in $(kubectl get pods --namespace {{ .Release.Namespace }} -l app={{ .Chart.Name }},release={{ .Release.Name }} --no-headers=true |   awk '{ print$1 }')
          do 
            echo "Cleaning logs and data in pod ${pod_id}"
            kubectl exec -it ${pod_id} -c ckaf-kafka-broker --namespace {{ .Release.Namespace }} -- sh /etc/kafka/cleanup.sh
          done
          echo KF prerestore done
{{ end }}
