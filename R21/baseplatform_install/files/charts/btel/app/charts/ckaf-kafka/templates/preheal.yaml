{{ if gt (int .Values.global.preheal ) 0 }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "kafka.name" . }}-kf-preheal-job
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: {{ .Values.global.seccompAllowedProfileNames }}
    seccomp.security.alpha.kubernetes.io/defaultProfileName: {{ .Values.global.seccompDefaultProfileName }}

spec:
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      {{- if .Values.global.rbacEnable }}
      serviceAccountName: {{ template "kfserviceAccount.name" . }}
      {{- end }}
      {{- if eq .Values.security.enabled true }}
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.security.runAsUser }}
        fsGroup: {{ .Values.security.fsGroup }}
      {{- end }}
      restartPolicy: Never
      containers:
      - name: ckaf-kafka-kf-preheal
        image: "{{ .Values.global.registry3 }}/{{ .Values.kubectlImage }}:{{ .Values.kubectlTag }}"
        imagePullPolicy: IfNotPresent
        {{- if eq .Values.security.enabled true }}
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          capabilities:
            drop:
              - all
        {{- end }}
        resources:
{{ toYaml .Values.jobResources | indent 10 }}
        command:
        - sh
        - -c
        - |
          pod_list={{ .Values.selective_heal.pod_list }}
          pods=$(echo $pod_list | tr "/" "\n")
          echo "Pod list is : ${pod_list}"

          {{- if (and (eq .Values.selective_heal.enabled true) (eq .Values.global.storageClass "local-storage")) }}
               echo "Selective heal process starts here"

               KF_PVC=$(kubectl get pvc -l app={{ .Chart.Name }},release={{ .Release.Name }} -n={{ .Release.Namespace }} |grep {{ .Release.Name }}| awk '{print $1}')
               echo "KF_PVC is ${KF_PVC}"

               for pod in ${pods}
               do
                   echo "Pod to heal is ::: ${pod}"
                   for i in ${KF_PVC}
                   do
                       KF_PVC_NUMBER=${i: -1}
                       echo "KF_PVC_NUMBER is ::: ${KF_PVC_NUMBER}"
                       if ((${KF_PVC_NUMBER} == ${pod}))
                       then
                           echo "*****************************"
                           echo "Using timeout here because, after deleting the pvc, pvc will be stuck in terminate state"
                           check_pvc_delete=$(timeout 1s kubectl delete pvc ${i} --namespace {{ .Release.Namespace }})
                           echo "We are patching the finalizers to empty in order to delete the pvc. As a result of deleting and patching pvc, pv also getting deleted"
                           check_pvc_patch=$(kubectl patch pvc ${i} -p '{"metadata":{"finalizers": []}}' --type=merge)

                           if grep -q "deleted" <<< "$check_pvc_delete"
                           then
                               echo "pvc deleted"
                               if grep -q "patched" <<< "$check_pvc_patch"
                               then
                                   echo "pvc patched"
                                   check_pvc=$(kubectl get pvc $i --namespace {{ .Release.Namespace }})
                                   if grep -q "$i" <<< "$check_pvc"
                                   then
                                       echo "pvc not deleted successfully. Exiting from heal job."
                                       exit
                                   else
                                       echo "pvc deleted successfully along with pv."
                                   fi
                               fi
                           else
                               echo "Unable to delete pvc. Exiting from the the heal job."
                               exit
                           fi
                           echo "pvc Deleted is : ${i}"
                           echo "*****************************"
                       fi
                   done
                   pod_to_delete=kf-{{ .Release.Name }}-${pod}
                   echo "Deleting the pod $pod_to_delete"
                   delete_pod=$(kubectl delete pod kf-{{ .Release.Name }}-${pod} --namespace {{ .Release.Namespace }} --wait=true)
                   if grep -q "deleted" <<< "$delete_pod"
                   then
                       echo "pod deleted successfully."
                   else
                       echo "Unable to delete the pod. Exiting from heal job."
                       exit
                   fi
               done
               echo "Selective heal process ends here."
          {{- else -}}
               echo "General heal process."
               kubectl delete pods --namespace {{ .Release.Namespace }} -l app={{ .Chart.Name }},release={{ .Release.Name }}
          {{ end }}
{{ end }}
