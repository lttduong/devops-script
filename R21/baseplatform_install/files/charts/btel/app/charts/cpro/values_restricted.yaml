## When the user needs to monitor/scrape the metrics at namespace level 
## then restrictedToNamespace flag is enabled.
## By using the values_restricted.yaml file override the existing values in values.yaml file.


## To limit the kube-state-metrics previleges to namespace level
kubeStateMetrics:
  ## kube-state-metrics container arguments
  ## specify the set of kubernetes objects using the --collectors that serviceaccount has to access,
  ## comma-separated list of collectors to be enabled.
  ## 'collectors' flag is renamed with 'resources' in kubestatemetrics latest version (i.e from v2.0)
  ## Set the namespaces using the --namespace option,Comma-separated list of namespaces to be enabled. Defaults to ""
  #
  args:
    collectors: "configmaps,cronjobs,daemonsets,deployments,endpoints,horizontalpodautoscalers,jobs,limitranges,poddisruptionbudgets,pods,replicasets,replicationcontrollers,resourcequotas,secrets,services,statefulsets"
    namespace: ""


server:
  ## If the restrictedToNamespace flag is set to true, then list the namespaces to monitor in comma-separated value
  ## Example: namespaceList: ['test1','test2']
  #
  namespaceList: []


## Prometheus server ConfigMap entries when restrictedToNamespace flag is enabled
##
serverFiles:
  prometheus.yml:
    global:
      ## How frequently to scrape targets by default
      ##
      scrape_interval: 1m
      ## How long until a scrape request times out
      ##
      scrape_timeout: 10s
      ## How frequently to evaluate rules
      ##
      evaluation_interval: 1m

    rule_files:
      - /etc/config/rules
      - /etc/config/alerts

    scrape_configs:
      - job_name: prometheus
        static_configs:
          - targets:
            - localhost:9090
        honor_labels: true

        kubernetes_sd_configs:
          - role: endpoints

            ## Provide the namespaces in 'names' parameter to scrape the metrics within the listed namespaces
            ## Example:  names: ['test1','test2']
            namespaces:
              names: 
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: prometheus
          - source_labels: [__meta_kubernetes_pod_container_name]
            action: drop
            regex: istio-proxy
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
      
      - job_name: 'kubernetes-apiservers'

        kubernetes_sd_configs:
          - role: endpoints

            ## Provide the namespaces in 'names' parameter to scrape the metrics within the listed namespaces
            ## Example:  names: ['test1','test2']   
            namespaces:
              names:

        # Default to scraping over https. If required, just disable this or change to
        # `http`.
        scheme: https

        # This TLS & bearer token file config is used to connect to the actual scrape
        # endpoints for cluster components. This is separate to discovery auth
        # configuration because discovery & scraping are two separate concerns in
        # Prometheus. The discovery auth config is automatic if Prometheus runs inside
        # the cluster. Otherwise, more config options have to be provided within the
        # <kubernetes_sd_config>.
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          # If your node certificates are self-signed or use a different CA to the
          # master CA, then disable certificate verification below. Note that
          # certificate verification is an integral part of a secure infrastructure
          # so this should only be disabled in a controlled environment. You can
          # disable certificate verification by uncommenting the line below.
          #
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        # Keep only the default/kubernetes service endpoints for the https port. This
        # will add targets for each API server which Kubernetes adds an endpoint to
        # the default/kubernetes service.
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace

      - job_name: 'kubernetes-nodes'

        # Default to scraping over https. If required, just disable this or change to
        # `http`.
        scheme: https

        # This TLS & bearer token file config is used to connect to the actual scrape
        # endpoints for cluster components. This is separate to discovery auth
        # configuration because discovery & scraping are two separate concerns in
        # Prometheus. The discovery auth config is automatic if Prometheus runs inside
        # the cluster. Otherwise, more config options have to be provided within the
        # <kubernetes_sd_config>.
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          # If your node certificates are self-signed or use a different CA to the
          # master CA, then disable certificate verification below. Note that
          # certificate verification is an integral part of a secure infrastructure
          # so this should only be disabled in a controlled environment. You can
          # disable certificate verification by uncommenting the line below.
          #
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
          - role: node

        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace


      - job_name: 'kubernetes-nodes-cadvisor'

        # Default to scraping over https. If required, just disable this or change to
        # `http`.
        scheme: https

        # This TLS & bearer token file config is used to connect to the actual scrape
        # endpoints for cluster components. This is separate to discovery auth
        # configuration because discovery & scraping are two separate concerns in
        # Prometheus. The discovery auth config is automatic if Prometheus runs inside
        # the cluster. Otherwise, more config options have to be provided within the
        # <kubernetes_sd_config>.
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          # If your node certificates are self-signed or use a different CA to the
          # master CA, then disable certificate verification below. Note that
          # certificate verification is an integral part of a secure infrastructure
          # so this should only be disabled in a controlled environment. You can
          # disable certificate verification by uncommenting the line below.
          #
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
          - role: node

        # This configuration will work only on kubelet 1.7.3+
        # As the scrape endpoints for cAdvisor have changed
        # if you are using older version you need to change the replacement to
        # replacement: /api/v1/nodes/${1}:4194/proxy/metrics
        # more info here https://github.com/coreos/prometheus-operator/issues/633
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace

      # Scrape config for service endpoints.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
      # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
      # to set this to `https` & most likely set the `tls_config` of the scrape config.
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: If the metrics are exposed on a different port to the
      # service then set this appropriately.
      - job_name: 'kubernetes-service-endpoints-insecure'

        kubernetes_sd_configs:
          - role: endpoints

            ## Provide the namespaces in 'names' parameter to scrape the metrics within the listed namespaces
            ## Example:  names: ['test1','test2']
            namespaces:
              names:

        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_container_name]
            action: drop
            regex: istio-proxy
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: keep
            target_label: __scheme__
            regex: http
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name
          - source_labels: [__meta_kubernetes_pod_node_name]
            target_label: kubernetes_io_hostname
            action: replace

      - job_name: 'prometheus-pushgateway'
        honor_labels: true
        scheme: http
        kubernetes_sd_configs:
          - role: service
            ## Provide the namespaces in 'names' parameter to scrape the metrics within the listed namespaces
            ## Example:  names: ['test1','test2']
            namespaces:
              names:

        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: pushgateway
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__

      - job_name: 'kubernetes-pods-insecure'
        kubernetes_sd_configs:
          - role: pod

            ## Provide the namespaces in 'names' parameter to scrape the metrics within the listed namespaces
            ## Example:  names: ['test1','test2']
            namespaces:
              names: 

        relabel_configs:  # If first two labels are present, pod should be scraped  by the istio-secure job.
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_sidecar_istio_io_status, __meta_kubernetes_pod_annotation_istio_mtls]
            action: drop
            regex: (([^;]+);([^;]*))|(([^;]*);(true))
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
            action: drop
            regex: https
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: instance

      # Example scrape config for probing services via the Blackbox Exporter.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `prometheus.io/probe`: Only probe services that have a value of `true`
      #
      #
      - job_name: 'prometheus-nodeexporter'
        honor_labels: true

        kubernetes_sd_configs:
          - role: endpoints

        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: node-exporter
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_node_name]
            target_label: kubernetes_io_hostname
            action: replace

      - job_name: 'kubernetes-services'

        metrics_path: /probe
        params:
          module: [http_2xx]

        kubernetes_sd_configs:
          - role: service

            ## Provide the namespaces in 'names' parameter to scrape the metrics within the listed namespaces
            ## Example:  names: ['test1','test2']
            namespaces:
              names:

        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: true
          - source_labels: [__address__]
            target_label: __param_target
          - target_label: __address__
            replacement: blackbox
          - source_labels: [__param_target]
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - source_labels: [__meta_kubernetes_service_name]
            target_label: kubernetes_name

      # Example scrape config for pods
      #
      # The relabeling allows the actual pod scrape endpoint to be configured via the
      # following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.
      # Mixer scrapping. Defaults to Prometheus and mixer on same namespace.
      - job_name: 'istio-mesh'
        kubernetes_sd_configs:
        - role: endpoints
          ## Provide the namespaces in 'names' parameter to scrape the metrics within the listed namespaces
          ## Example:  names: ['test1','test2']
          namespaces:
            names:  

        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: istio-telemetry;prometheus
  
      # Scrape config for envoy stats
      - job_name: 'envoy-stats'
        metrics_path: /stats/prometheus
        kubernetes_sd_configs:
        - role: pod
          ## Provide the namespaces in 'names' parameter to scrape the metrics within the listed namespaces
          ## Example:  names: ['test1','test2']
          namespaces:
            names: 
  
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_container_port_name]
          action: keep
          regex: '.*-envoy-prom'
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:15090
          target_label: __address__
        - action: labeldrop
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: pod_name
  
      - job_name: 'istio-policy'
        kubernetes_sd_configs:
        - role: endpoints
            ## Provide the namespaces in 'names' parameter to scrape the metrics within the listed namespaces
            ## Example:  names: ['test1','test2']
          namespaces:
            names: 
  
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: istio-policy;http-policy-monitoring
  
      - job_name: 'istio-telemetry'
        kubernetes_sd_configs:
        - role: endpoints
          ## Provide the namespaces in 'names' parameter to scrape the metrics within the listed namespaces
          ## Example:  names: ['test1','test2']
          namespaces:
            names:  
  
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: istio-telemetry;http-monitoring
  
      - job_name: 'pilot'
        kubernetes_sd_configs:
        - role: endpoints
          ## Provide the namespaces in 'names' parameter to scrape the metrics within the listed namespaces
          ## Example:  names: ['test1','test2']
          namespaces:
            names:  
  
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: istiod;http-monitoring
        - source_labels: [__meta_kubernetes_service_label_app]
          target_label: app

      - job_name: 'galley'
        kubernetes_sd_configs:
        - role: endpoints
          ## Provide the namespaces in 'names' parameter to scrape the metrics within the listed namespaces
          ## Example:  names: ['test1','test2']
          namespaces:
            names:  
  
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: istio-galley;http-monitoring
  
      - job_name: 'citadel'
        kubernetes_sd_configs:
        - role: endpoints
          ## Provide the namespaces in 'names' parameter to scrape the metrics within the listed namespaces
          ## Example:  names: ['test1','test2']
          namespaces:
            names: 
  
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: istio-citadel;http-monitoring
  
      - job_name: 'sidecar-injector'
  
        kubernetes_sd_configs:
        - role: endpoints
          ## Provide the namespaces in 'names' parameter to scrape the metrics within the listed namespaces
          ## Example:  names: ['test1','test2']
          namespaces:
            names: 
  
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: istio-sidecar-injector;http-monitoring
