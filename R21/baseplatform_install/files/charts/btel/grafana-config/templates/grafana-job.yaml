{{- if .Values.SetDashboard.enabled -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Chart.Name }}-grafana
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      labels:
        name: {{ .Chart.Name }}-grafana
    spec:
      dnsPolicy: {{ .Values.dns.policy }}
      restartPolicy: Never
      securityContext:
        runAsUser: 1000
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.image.registry }}/{{ .Values.centos.image.name }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        resources:
{{ toYaml .Values.grafana_configurator.resources | indent 10 }}
        command: ["/bin/sh", "-c"]
        workingDir: /opt/grafana-import-dashboards
        args:
          - >
            function log {
                level=$1
                message=$2
                echo "{\"version\": \"1.0\", \"type\": \"log\", \"systemid\": \"{{ .Chart.Name }}\",\
             \"system\": \"{{ .Chart.Name }}\", \"log\": {\"message\": \"${message}\"},\
             \"level\": \"${level}\", \"time\": \"$(date)\"}"
            }

            log INFO "Importing dashboards started"

            for file in *.json ; do
                if [ -e "${file}" ] ; then
                    log INFO "Importing dashboards ${file}"

                    temp_dashboard=$(mktemp)
                    ( echo '{"dashboard":';  cat "${file}"; \
                    {{- if .Values.SetDashboard.overwrite }}
                        echo ',"overwrite":true}' ) > ${temp_dashboard} \
                    {{- else }}
                        echo ',"overwrite":false}' ) > ${temp_dashboard} \
                    {{- end }}

                    temp_file_out=$(mktemp)

                    result=$(curl --silent \
                        --cacert {{ .Values.config.grafana.configurator.certificatesDir }}/ca.crt \
                        --output ${temp_file_out} \
                        --write-out '%{http_code}' \
                        -H "netguard-proxy-user: admin" \
                        -H "netguard-proxy-roles: BP_GRAFANA" \
                        "https://{{ .Values.grafana.name }}.{{ .Values.bpNamespace }}.\
            {{ .Values.dns.domain }}:{{ .Values.grafana.port }}/api/dashboards/db" \
                        -H "Content-Type: application/json" \
                        --max-time 30 --retry 3 \
                        --data-binary "@${temp_dashboard}")

                    rm ${temp_dashboard}

                    log INFO "Dashboards ${file} import status: ${result}"
                    response=$(cat ${temp_file_out})
                    printf -v response_escaped "%q" "${response}"
                    rm ${temp_file_out}
                    if [[ -n "${response}" ]]; then
                        log INFO "Response: ${response_escaped}"
                    fi
                    if [ ${result} -ne 200 ]; then
                        log ERROR "Dashboards import ${file} failed ${response_escaped}"
                        exit 1
                    fi
                fi
            done
        volumeMounts:
          - name: dashboard-volume
            mountPath: /opt/grafana-import-dashboards
          - name: {{ .Chart.Name }}-grafana-tls
            mountPath: {{ .Values.config.grafana.configurator.certificatesDir }}
            readOnly: true
      volumes:
        - name: dashboard-volume
          configMap:
            name: {{ .Chart.Name }}-dashs
        - name: {{ .Chart.Name }}-grafana-tls
          secret:
            secretName: {{ .Chart.Name }}-grafana-tls
{{- end -}}
