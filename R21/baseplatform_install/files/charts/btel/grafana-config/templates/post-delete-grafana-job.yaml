{{- if not (eq (default "enable" .Values.hooks.postDeleteJob) "disable") }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Chart.Name }}-post-delete-grafana
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      labels:
        name: {{ .Chart.Name }}-post-delete-grafana
    spec:
      dnsPolicy: {{ .Values.dns.policy }}
      restartPolicy: Never
      securityContext:
        runAsUser: 1000
      containers:
      - name: {{ .Chart.Name }}-post-delete
        image: {{ .Values.image.registry }}/{{ .Values.centos.image.name }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        resources:
{{ toYaml .Values.grafana_configurator.resources | indent 10 }}
        command: ["/bin/sh", "-c"]
        workingDir: /opt/grafana-delete-dashboards
        args:
          - >
            function log {
                level=$1
                message=$2
                echo "{\"version\": \"1.0\", \"type\": \"log\", \"systemid\": \"{{ .Chart.Name }}\",\
             \"system\": \"{{ .Chart.Name }}\", \"log\": {\"message\": \"${message}\"},\
             \"level\": \"${level}\", \"time\": \"$(date)\"}"
            }

            log INFO "Deleting dashboards started"

            for file in *.json ; do
                if [ -e "${file}" ] ; then
                    dashboard_name=$(jq -r ".title" ${file})

                    log INFO "Getting dashboard ${dashboard_name} uid"

                    temp_file_uid_out=$(mktemp)

                    result_uid=$(curl --silent \
                        --cacert {{ .Values.config.grafana.configurator.certificatesDir }}/ca.crt \
                        --output ${temp_file_uid_out} \
                        --write-out '%{http_code}' \
                        -G \
                        --data-urlencode "query=${dashboard_name}" \
                        -H "netguard-proxy-user: admin" \
                        -H "netguard-proxy-roles: BP_GRAFANA" \
                        https://{{ .Values.grafana.name }}.{{ .Values.bpNamespace }}.\
            {{ .Values.dns.domain }}:{{ .Values.grafana.port }}/api/search \
                        --max-time 30 --retry 3)

                    log INFO "Dashboard ${file} getting uid status: ${result_uid}"
                    response_uid=$(cat ${temp_file_uid_out})

                    printf -v response_escaped_uid "%q" "${response_uid}"
                    rm ${temp_file_uid_out}
                    if [[ -n "${response_uid}" ]]; then
                        log INFO "Response: ${response_escaped_uid}"
                    fi
                    if [ ${result_uid} -ne 200 ]; then
                        log WARN "Dashboard getting uid ${file} failed ${response_escaped_uid}"
                        break
                    fi

                    dashboard_uid=$(echo ${response_uid} | jq -r ".[]|.uid")
                    log INFO "Dashboard ${file} uud: ${dashboard_uid}"
                    log INFO "Deleting dashboard ${file} with uid: ${dashboard_uid}"

                    temp_file_out=$(mktemp)

                    result=$(curl --silent \
                        --cacert {{ .Values.config.grafana.configurator.certificatesDir }}/ca.crt \
                        --output ${temp_file_out} \
                        --write-out '%{http_code}' \
                        -X DELETE \
                        -H "netguard-proxy-user: admin" \
                        -H "netguard-proxy-roles: BP_GRAFANA" \
                        "https://{{ .Values.grafana.name }}.{{ .Values.bpNamespace }}.\
            {{ .Values.dns.domain }}:{{ .Values.grafana.port }}/api/dashboards/uid/${dashboard_uid}" \
                        --max-time 30 --retry 3)

                    log INFO "Dashboards ${file} delete status: ${result}"
                    response=$(cat ${temp_file_out})
                    printf -v response_escaped "%q" "${response}"
                    rm ${temp_file_out}
                    if [[ -n "${response}" ]]; then
                        log INFO "Response: ${response_escaped}"
                    fi
                    if [ ${result} -ne 200 ]; then
                        log WARN "Dashboards delete ${file} failed ${response_escaped}"
                        break
                    fi
                fi
            done
        volumeMounts:
          - name: dashboard-volume
            mountPath: /opt/grafana-delete-dashboards
          - name: {{ .Chart.Name }}-grafana-tls
            mountPath: {{ .Values.config.grafana.configurator.certificatesDir }}
            readOnly: true
      volumes:
        - name: dashboard-volume
          configMap:
            name: {{ .Chart.Name }}-post-delete-dashs
        - name: {{ .Chart.Name }}-grafana-tls
          secret:
            secretName: {{ .Chart.Name }}-grafana-tls
{{- end }}
