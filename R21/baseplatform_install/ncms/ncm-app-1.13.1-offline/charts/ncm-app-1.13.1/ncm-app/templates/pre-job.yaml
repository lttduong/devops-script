{{- if .Values.autonomous }}
{{- if .Values.autonomous.tiller }}
{{- if .Values.autonomous.tiller.enabled }}
{{- if .Values.autonomous.tiller.secretName }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-pre-sa
  namespace: "{{.Release.Namespace}}"
  labels:
    {{- include "ncm-app.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: "{{.Release.Namespace}}"
  name: {{ .Release.Name }}-pre-role
  labels:
    {{- include "ncm-app.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "create", "delete", "list"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}-pre-rb
  namespace: "{{.Release.Namespace}}"
  labels:
    {{- include "ncm-app.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}-pre-sa
  namespace: "{{.Release.Namespace}}"
roleRef:
  kind: Role
  name: {{ .Release.Name }}-pre-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-pre-job
  labels:
    {{- include "ncm-app.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "3"
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded
spec:
  backoffLimit: 1
  template:
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        {{- include "ncm-app.labels" . | nindent 8 }}
    spec:
      serviceAccount: {{ .Release.Name }}-pre-sa
      securityContext:
        runAsUser: 1000
        runAsGroup:  1000
        fsGroup: 1000
      restartPolicy: Never
      containers:
      - image: "{{ .Values.global.registry }}/{{ .Values.image.name }}:{{ .Values.image.tag }}" 
        name: {{ .Release.Name }}
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "256Mi"
            cpu: "250m"
        command:
        - sh
        - -c
        - |
          kubectl get secret -n {{ .Release.Namespace }} | grep {{ .Values.autonomous.tiller.secretName }} && kubectl delete secret -n {{ .Release.Namespace }} {{ .Values.autonomous.tiller.secretName }}
          kubectl create secret docker-registry {{ .Values.autonomous.tiller.secretName }} --docker-password {{ .Values.autonomous.tiller.password }} --docker-username {{ .Values.autonomous.tiller.username }} --docker-server={{ .Values.autonomous.tiller.registry }} --namespace {{ .Release.Namespace }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

